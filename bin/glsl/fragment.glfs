#version 430

// set this to 1 in order to write fragments to a buffer
#define USE_A_BUFFER 0

/*
The following interface is implemented in this shader:
//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
void finish_fragment(vec4 color, float depth);
//***** end interface of fragment.glfs ***********************************
*/

uniform bool alpha_test = false;
uniform float alpha_cutoff = 0.1;

#if USE_A_BUFFER == 0
uniform float gamma = 2.2;
out vec4 frag_color;
#else
//***** begin interface of a_buffer.glsl ***********************************
bool a_buffer_gather_and_blend(in vec2 frag_xy, out vec4 rgba, out float depth);
bool a_buffer_insert_fragment(vec3 frag_xyz, vec4 rgba);
//***** end interface of a_buffer.glsl ***********************************
#endif

void finish_fragment(vec4 color)
{
	// alpha test
	if (alpha_test && color.a <= alpha_cutoff)
		discard;
#if USE_A_BUFFER == 0
	frag_color = color;
	// perform inverse gamma correction and clamp to avoid problems with on laptop screens
	frag_color.rgb = clamp(pow(frag_color.rgb, vec3(gamma)),0.0,0.9999999);
#else
	a_buffer_insert_fragment(gl_FragCoord.xyz, color);
#endif
}

void finish_fragment(vec4 color, float depth)
{
	// alpha test
	if (alpha_test && color.a <= alpha_cutoff)
		discard;
#if USE_A_BUFFER == 0
	frag_color = color;
	// perform inverse gamma correction and clamp to avoid problems with on laptop screens
	frag_color.rgb = clamp(pow(frag_color.rgb, vec3(gamma)),0.0,0.9999999);
	gl_FragDepth = depth;
#else
	a_buffer_insert_fragment(vec3(gl_FragCoord.xy, depth), color);
#endif
}