#version 430

#define NUM_STEPS 128
#define INTERPOLATION_MODE 1
#define ENABLE_NOISE_OFFSET 1
#define ENABLE_SCALE_ADJUSTMENT 0
#define ENABLE_LIGHTING 0
#define ENABLE_DEPTH_TEST 0
#define TRANSFER_FUNCTION_SAMPLER_DIMENSIONS 1

//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
//***** end interface of fragment.glfs ***********************************

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of surface.glsl ***********************************
vec4 compute_reflected_appearance(vec3 position_eye, vec3 normal_eye, vec4 color, int side);
//***** end interface of surface.glsl ***********************************

layout (binding = 0) uniform sampler3D volume_tex;
#if TRANSFER_FUNCTION_SAMPLER_DIMENSIONS == 1
layout (binding = 1) uniform sampler1D transfer_function_tex;
#else
layout (binding = 1) uniform sampler2D transfer_function_tex;
#endif
layout (binding = 2) uniform sampler2D noise_tex;
#if ENABLE_LIGHTING == 1
layout (binding = 3) uniform sampler3D gradient_tex;
#endif
#if ENABLE_DEPTH_TEST == 1
layout (binding = 4) uniform sampler2D depth_tex;
#endif

uniform vec2 viewport_dims;
uniform float opacity_scale;
uniform float size_scale;
uniform vec3 clip_box_min;
uniform vec3 clip_box_max;

in vec4 position_fs;
in vec3 position_object;
in vec3 eye_fs;

/*--------------------------------------------------------------------------*\
Copyright (c) 2008-2009, Danny Ruijters. All rights reserved.
http://www.dannyruijters.nl/cubicinterpolation/
This file is part of CUDA Cubic B-Spline Interpolation (CI).
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
*  Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
*  Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
*  Neither the name of the copyright holders nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied.
When using this code in a scientific project, please cite one or all of the
following papers:
*  Daniel Ruijters and Philippe Thévenaz,
   GPU Prefilter for Accurate Cubic B-Spline Interpolation, 
   The Computer Journal, vol. 55, no. 1, pp. 15-20, January 2012.
   http://dannyruijters.nl/docs/cudaPrefilter3.pdf
*  Daniel Ruijters, Bart M. ter Haar Romeny, and Paul Suetens,
   Efficient GPU-Based Texture Interpolation using Uniform B-Splines,
   Journal of Graphics Tools, vol. 13, no. 4, pp. 61-69, 2008.
\*--------------------------------------------------------------------------*/

// tricubic interpolation function (see copyright notice above)
vec4 textureCubic(sampler3D tex, vec3 coord) {

	// shift the coordinate from [0,1] to [-0.5, tex_size-0.5]
	vec3 tex_size = vec3(textureSize(volume_tex, 0));
	vec3 coord_grid = coord * tex_size - 0.5;
	vec3 index = floor(coord_grid);
	vec3 fraction = coord_grid - index;
	vec3 one_frac = 1.0 - fraction;

	vec3 w0 = 1.0/6.0 * one_frac*one_frac*one_frac;
	vec3 w1 = 2.0/3.0 - 0.5 * fraction*fraction*(2.0-fraction);
	vec3 w2 = 2.0/3.0 - 0.5 * one_frac*one_frac*(2.0-one_frac);
	vec3 w3 = 1.0/6.0 * fraction*fraction*fraction;

	vec3 g0 = w0 + w1;
	vec3 g1 = w2 + w3;
	vec3 mult = 1.0 / tex_size;
	vec3 h0 = mult * ((w1 / g0) - 0.5 + index);  //h0 = w1/g0 - 1, move from [-0.5, nrOfVoxels-0.5] to [0,1]
	vec3 h1 = mult * ((w3 / g1) + 1.5 + index);  //h1 = w3/g1 + 1, move from [-0.5, nrOfVoxels-0.5] to [0,1]

	// fetch the eight linear interpolations
	// weighting and fetching is interleaved for performance and stability reasons
	vec4 tex000 = textureLod(tex, h0, 0);
	vec4 tex100 = textureLod(tex, vec3(h1.x, h0.y, h0.z), 0);
	tex000 = mix(tex100, tex000, g0.x);  //weigh along the x-direction
	vec4 tex010 = textureLod(tex, vec3(h0.x, h1.y, h0.z), 0);
	vec4 tex110 = textureLod(tex, vec3(h1.x, h1.y, h0.z), 0);
	tex010 = mix(tex110, tex010, g0.x);  //weigh along the x-direction
	tex000 = mix(tex010, tex000, g0.y);  //weigh along the y-direction
	vec4 tex001 = textureLod(tex, vec3(h0.x, h0.y, h1.z), 0);
	vec4 tex101 = textureLod(tex, vec3(h1.x, h0.y, h1.z), 0);
	tex001 = mix(tex101, tex001, g0.x);  //weigh along the x-direction
	vec4 tex011 = textureLod(tex, vec3(h0.x, h1.y, h1.z), 0);
	vec4 tex111 = textureLod(tex, h1, 0);
	tex011 = mix(tex111, tex011, g0.x);  //weigh along the x-direction
	tex001 = mix(tex011, tex001, g0.y);  //weigh along the y-direction

	return mix(tex001, tex000, g0.z);  //weigh along the z-direction
}

// smooth filtering from https://www.shadertoy.com/view/XsfGDn
vec4 textureSmooth(sampler3D tex, vec3 coord) {
	
	vec3 tex_size = vec3(textureSize(volume_tex, 0));
	vec3 uv = coord * tex_size + 0.5;

	vec3 iuv = floor(uv);
	vec3 fuv = fract(uv);

	uv = iuv + fuv*fuv*(3.0-2.0*fuv); // fuv*fuv*fuv*(fuv*(fuv*6.0-15.0)+10.0);
	uv = (uv - 0.5)/tex_size;

	return textureLod(tex, uv, 0);
}

vec4 textureNearest(sampler3D tex, vec3 coord) {
	
	ivec3 tex_size = textureSize(tex, 0);
	ivec3 uv = ivec3(coord * tex_size);

	return texelFetch(tex, uv, 0);
}

/*vec3 gradient(vec3 coords, int channel) {

	vec3 tex_size = vec3(textureSize(volume_tex, 0));
	vec3 ts = 1.0 / tex_size;

	float xr = texture(volume_tex, coords + ts * vec3(+1, 0, 0))[channel];
	float xl = texture(volume_tex, coords + ts * vec3(-1, 0, 0))[channel];
	float yr = texture(volume_tex, coords + ts * vec3(0, +1, 0))[channel];
	float yl = texture(volume_tex, coords + ts * vec3(0, -1, 0))[channel];
	float zr = texture(volume_tex, coords + ts * vec3(0, 0, +1))[channel];
	float zl = texture(volume_tex, coords + ts * vec3(0, 0, -1))[channel];
	return -0.5 * vec3(xr - xl, yr - yl, zr - zl);
}*/

//vec3 object_space_eye_pos() {
//
//	return (get_inverse_modelview_matrix() * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
//}

vec3 object_space_view_dir(vec3 v) {

    //return object_space_eye_pos() - v;
    return eye_fs - v;
}

vec3 calculate_lighting(vec3 col, vec3 normal, vec3 light_dir, vec3 eye_dir, float specular_intensity) {

    float ndotl = max(mix(0.0f, 1.5f, dot(normal, light_dir)), 0.5f); // modified, to avoid volume becoming too dark
    vec3 diffuse = ndotl * col;
    vec3 v = eye_dir;
    vec3 r = normalize(reflect(-light_dir, normal));
    float rdotv = max( dot( r, v ), 0.0 );
    float specular = pow(rdotv, 32.0f) * specular_intensity;
    return diffuse + specular;
}

vec3 safe_normalize(vec3 v) {

	float len = length(v);
	return len > 0.000001 ? v/len : vec3(0.0);
}

void main()
{
	const float step_size = 1.732051 / NUM_STEPS;
	vec2 frag_tex_coords = gl_FragCoord.xy / viewport_dims;

#if ENABLE_LIGHTING == 1
	// TODO: make this use the framework lighting system?
	// light is static to window
	//const vec3 light_dir = normalize((get_inverse_modelview_matrix() * vec4(0.0, 1.0, 0.0, 0.0)).xyz);

	// light is placed in scene
	//const vec3 light_dir = normalize(object_space_view_dir(vec3(0.0, 1.0, 0.0)));
	const vec3 light_dir = normalize(vec3(0.0, 1.0, 0.0));
#endif

#if ENABLE_DEPTH_TEST == 0
	vec3 ray_start_pos = position_object;
#else
	float depth = texture(depth_tex, frag_tex_coords).r;
	
	vec4 clip_space_pos = vec4(frag_tex_coords * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);

	vec4 object_space_pos = get_inverse_modelview_projection_matrix() * clip_space_pos;
	object_space_pos /= object_space_pos.w;

	//vec3 eye = object_space_eye_pos();
	vec3 eye = eye_fs;

	vec3 ray_start_pos;
	vec3 pos_to_eye = position_object - eye;
	vec3 depth_pos_to_eye = object_space_pos.xyz - eye;

	if(dot(pos_to_eye, pos_to_eye) < dot(depth_pos_to_eye, depth_pos_to_eye))
		ray_start_pos = position_object;
	else
		ray_start_pos = object_space_pos.xyz;
#endif
	vec3 ray_dir = normalize(object_space_view_dir(position_object));
	
	// transform texture coordinates from [-0.5,0.5] to [0.0,1.0]
	ray_start_pos += 0.5;
#if ENABLE_NOISE_OFFSET == 1
	// add a small offset noise to the ray start position to prevent ring artifacts
	//ray_start_pos += (2.0 * ray_dir / NUM_STEPS) * texture(noise_tex, 5.0*texcoord_fs).r;
	ivec2 ts = textureSize(noise_tex, 0);
	ray_start_pos += (2.0 * ray_dir / NUM_STEPS) * texture(noise_tex, frag_tex_coords*ts).r;
#endif

	vec4 color = vec4(0.0);

	for(int istep = 0; istep < NUM_STEPS; ++istep) {
		// calculate the current ray position
		float t = istep * step_size;
		vec3 pos = ray_start_pos + t*ray_dir;

		// prevent tracing behind the eye position when inside of the volume
		if(dot(ray_dir, (pos - 0.5) - eye_fs) > 0.0)
			break;
		
		// prevent tracing outside of the volume
		if (pos.x < -0.001 || pos.x > 1.001 ||
			pos.y < -0.001 || pos.y > 1.001 ||
			pos.z < -0.001 || pos.z > 1.001)
			break;

		// transform pos from [0,1] to range given by [clip_box_min,clip_box_max] to allow rendering only part of the volume
		vec3 uvw = pos;
		uvw = mix(clip_box_min, clip_box_max, pos);

#if (INTERPOLATION_MODE == 0)
		float density = textureNearest(volume_tex, uvw).r;
#elif (INTERPOLATION_MODE == 1)
		float density = textureLod(volume_tex, uvw, 0).r;
#elif (INTERPOLATION_MODE == 2)
		float density = textureSmooth(volume_tex, uvw).r;
#else
		float density = textureCubic(volume_tex, uvw).r;
#endif
		// apply the transfer function
#if TRANSFER_FUNCTION_SAMPLER_DIMENSIONS == 1
		vec4 color_in = texture(transfer_function_tex, density);
#else
		vec4 color_in = texture(transfer_function_tex, vec2(density, 0.5f));
#endif
		
#if ENABLE_LIGHTING == 1
		// get the normal from a precomputed texture as the average gradient over all 4 channels
		vec3 normal = -safe_normalize(texture(gradient_tex, uvw).xyz);
		// apply lighting to all input colors
		color_in.rgb *= calculate_lighting(color_in.rgb, normal, light_dir, ray_dir, 0.3);
#endif
		// scale the alpha channel based on the global opacity scale
		color_in.a *= opacity_scale;

#if ENABLE_SCALE_ADJUSTMENT == 1
		// dont know if this is correct but it works for now
		color_in.a *= size_scale;
		
		float step_fac = -exp(-step_size) + 1.0;
		color_in.a *= step_fac;
#endif
		// make sure the alpha alue does not exceed 1
		color_in.a = min(color_in.a, 1.0);

		// premultiply alpha
		color_in.rgb *= color_in.a;
		
		// blend back to front
		color = color_in + (1.0 - color_in.a)*color;
	}

	finish_fragment(color);
}
